//
//  fruits_graphqlTests-fruits_graphqlMocks.generated.swift
//  fruits_graphql
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

@testable import Mockingbird
@testable import fruits_graphql
import Apollo
import Foundation
import RxSwift
import Swift
import UIKit

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked FruitsUseCase
public final class FruitsUseCaseMock: fruits_graphql.FruitsUseCase, Mockingbird.Mock {
  typealias MockingbirdSupertype = fruits_graphql.FruitsUseCase
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "fruits_graphql"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    FruitsUseCaseMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `getFruits`(`completion`: @escaping (Result<[fruits_graphql.FruitModel], Error>) -> Void)
  public func `getFruits`(`completion`: @escaping (Result<[fruits_graphql.FruitModel], Error>) -> Void) -> Void {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`getFruits`(`completion`: @escaping (Result<[fruits_graphql.FruitModel], Error>) -> Void) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`completion`)], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (@escaping (Result<[fruits_graphql.FruitModel], Error>) -> Void) -> Void { return mkbImpl(`completion`) }
      if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = mkbObject.`getFruits`(completion: `completion`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `getFruits`(`completion`: @autoclosure () -> (Result<[fruits_graphql.FruitModel], Error>) -> Void) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (@escaping (Result<[fruits_graphql.FruitModel], Error>) -> Void) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (@escaping (Result<[fruits_graphql.FruitModel], Error>) -> Void) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`getFruits`(`completion`: @escaping (Result<[fruits_graphql.FruitModel], Error>) -> Void) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`completion`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }

  // MARK: Mocked `addFruit`(`addFruitId`: String, `scientificName`: String, `treeName`: String, `fruitName`: String, `family`: String, `origin`: String, `description`: String, `bloom`: String, `maturationFruit`: String, `lifeCycle`: String, `climaticZone`: String, `completion`: @escaping (Result<fruits_graphql.FruitModel, Error>) -> Void)
  public func `addFruit`(`addFruitId`: String, `scientificName`: String, `treeName`: String, `fruitName`: String, `family`: String, `origin`: String, `description`: String, `bloom`: String, `maturationFruit`: String, `lifeCycle`: String, `climaticZone`: String, `completion`: @escaping (Result<fruits_graphql.FruitModel, Error>) -> Void) -> Void {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`addFruit`(`addFruitId`: String, `scientificName`: String, `treeName`: String, `fruitName`: String, `family`: String, `origin`: String, `description`: String, `bloom`: String, `maturationFruit`: String, `lifeCycle`: String, `climaticZone`: String, `completion`: @escaping (Result<fruits_graphql.FruitModel, Error>) -> Void) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`addFruitId`), Mockingbird.ArgumentMatcher(`scientificName`), Mockingbird.ArgumentMatcher(`treeName`), Mockingbird.ArgumentMatcher(`fruitName`), Mockingbird.ArgumentMatcher(`family`), Mockingbird.ArgumentMatcher(`origin`), Mockingbird.ArgumentMatcher(`description`), Mockingbird.ArgumentMatcher(`bloom`), Mockingbird.ArgumentMatcher(`maturationFruit`), Mockingbird.ArgumentMatcher(`lifeCycle`), Mockingbird.ArgumentMatcher(`climaticZone`), Mockingbird.ArgumentMatcher(`completion`)], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (String, String, String, String, String, String, String, String, String, String, String, @escaping (Result<fruits_graphql.FruitModel, Error>) -> Void) -> Void { return mkbImpl(`addFruitId`, `scientificName`, `treeName`, `fruitName`, `family`, `origin`, `description`, `bloom`, `maturationFruit`, `lifeCycle`, `climaticZone`, `completion`) }
      if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = mkbObject.`addFruit`(addFruitId: `addFruitId`, scientificName: `scientificName`, treeName: `treeName`, fruitName: `fruitName`, family: `family`, origin: `origin`, description: `description`, bloom: `bloom`, maturationFruit: `maturationFruit`, lifeCycle: `lifeCycle`, climaticZone: `climaticZone`, completion: `completion`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `addFruit`(`addFruitId`: @autoclosure () -> String, `scientificName`: @autoclosure () -> String, `treeName`: @autoclosure () -> String, `fruitName`: @autoclosure () -> String, `family`: @autoclosure () -> String, `origin`: @autoclosure () -> String, `description`: @autoclosure () -> String, `bloom`: @autoclosure () -> String, `maturationFruit`: @autoclosure () -> String, `lifeCycle`: @autoclosure () -> String, `climaticZone`: @autoclosure () -> String, `completion`: @autoclosure () -> (Result<fruits_graphql.FruitModel, Error>) -> Void) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, String, String, String, String, String, String, String, String, String, String, @escaping (Result<fruits_graphql.FruitModel, Error>) -> Void) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, String, String, String, String, String, String, String, String, String, String, @escaping (Result<fruits_graphql.FruitModel, Error>) -> Void) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`addFruit`(`addFruitId`: String, `scientificName`: String, `treeName`: String, `fruitName`: String, `family`: String, `origin`: String, `description`: String, `bloom`: String, `maturationFruit`: String, `lifeCycle`: String, `climaticZone`: String, `completion`: @escaping (Result<fruits_graphql.FruitModel, Error>) -> Void) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`addFruitId`), Mockingbird.resolve(`scientificName`), Mockingbird.resolve(`treeName`), Mockingbird.resolve(`fruitName`), Mockingbird.resolve(`family`), Mockingbird.resolve(`origin`), Mockingbird.resolve(`description`), Mockingbird.resolve(`bloom`), Mockingbird.resolve(`maturationFruit`), Mockingbird.resolve(`lifeCycle`), Mockingbird.resolve(`climaticZone`), Mockingbird.resolve(`completion`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }

  // MARK: Mocked `deleteFruit`(`id`: String, `completion`: @escaping (Result<String, Error>) -> Void)
  public func `deleteFruit`(`id`: String, `completion`: @escaping (Result<String, Error>) -> Void) -> Void {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`deleteFruit`(`id`: String, `completion`: @escaping (Result<String, Error>) -> Void) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`id`), Mockingbird.ArgumentMatcher(`completion`)], returnType: Swift.ObjectIdentifier((Void).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (String, @escaping (Result<String, Error>) -> Void) -> Void { return mkbImpl(`id`, `completion`) }
      if let mkbImpl = mkbImpl as? () -> Void { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Void = mkbObject.`deleteFruit`(id: `id`, completion: `completion`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Void).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `deleteFruit`(`id`: @autoclosure () -> String, `completion`: @autoclosure () -> (Result<String, Error>) -> Void) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, @escaping (Result<String, Error>) -> Void) -> Void, Void> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, @escaping (Result<String, Error>) -> Void) -> Void, Void>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`deleteFruit`(`id`: String, `completion`: @escaping (Result<String, Error>) -> Void) -> Void", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`id`), Mockingbird.resolve(`completion`)], returnType: Swift.ObjectIdentifier((Void).self)))
  }
}

/// Returns a concrete mock of `FruitsUseCase`.
public func mock(_ type: fruits_graphql.FruitsUseCase.Protocol, file: StaticString = #file, line: UInt = #line) -> FruitsUseCaseMock {
  return FruitsUseCaseMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
